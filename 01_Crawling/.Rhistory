head(data_1)
str(data_1)
data_1[data_1$Hours == 06:00]
data_1[data_1$Hours == 06:00:00]
data_1[data_1$Hours = 20:01:00]
data_1[data_1$Hours == 20:01:00]
data_1[data_1$Hours == '20:01:00']
data_1[data_1$Hours == '20:01:00']
head(data_1)
data_1[data_1$dates == '2019-01-11']
data_1[data_1$dates == 2019-01-11]
data_1[data_1$Days == '금요일']
head(data_1)
str(data_1)
data_1[data_1$Days == '금요일',]
head(data_1)
data_1[data_1$Hours == '06:00:00',]
data_1[data_1$Hours == '13:35:00',]
str(data_1) ; head(data_1)
# 문자열 datetime -> date, time 으로 분리 및 요일 생성
data_1 <- data %>%
mutate(DateTime = ymd_hm(time)) %>%
mutate(Dates = format(as.POSIXct(strptime(DateTime,"%Y-%m-%d %H:%M:%S",tz="")) ,format = "%Y-%m-%d")) %>%
mutate(Hours = as.numeric(format(as.POSIXct(strptime(DateTime,"%Y-%m-%d %H:%M:%S",tz="")) ,format = "%H:%M:%S"))) %>%
mutate(Days = weekdays(as.Date(DateTime))) %>%
select(score, Dates, Hours, Days)
str(data_1) ; head(data_1)
# 문자열 datetime -> date, time 으로 분리 및 요일 생성
data_1 <- data %>%
mutate(DateTime = ymd_hm(time)) %>%
mutate(Dates = format(as.POSIXct(strptime(DateTime,"%Y-%m-%d %H:%M:%S",tz="")) ,format = "%Y-%m-%d")) %>%
mutate(Hours = format(as.POSIXct(strptime(DateTime,"%Y-%m-%d %H:%M:%S",tz="")) ,format = "%H:%M:%S")) %>%
mutate(Days = weekdays(as.Date(DateTime))) %>%
select(score, Dates, Hours, Days)
str(data_1) ; head(data_1)
data_1[data_1$Hours == '13*',]
data_1[grep('06:', data_1$Hours)
data_1[grep('06:', data_1$Hours)]
grep('06', data_1)
grep('06:', data_1)
grep('06:', data_1$Hours)
grep('^06:', data_1$Hours)
a <- grep('^06:', data_1$Hours)
a
data_1[grep('^06:', data_1$Hours)]
data_1$Hours[grep('^06:', data_1$Hours)]
data_1$Hours[grep('^06:', )]
data_1[data_1$Hours == '^06']
data_1$Hours[grep('^06:', )]
data_1[data_1$Hours == '^06']
data_1$Hours[grep('^06:', data_1$Hours)]
data_1$Hours[grep('^06:', data_1$Hours), 1]
data_1[grep('^06:', data_1$Hours), 1]
data_1[grep('^06:', data_1$Hours), ]
data_1[grep('^07:', data_1$Hours), ] # 06시 리플 행 추출
data_1[grep('^06:', data_1$Hours), ] %>% select(score, Hours) # 06시 리플 행 추출
data_1_06 <- data_1[grep('^06:', data_1$Hours), ] %>% select(score, Hours) # 06시 리플 행 추출
data_1_07 <- data_1[grep('^07:', data_1$Hours), ] %>% select(score, Hours)# 07시 리플 행 추출
data_1_07 <- data_1[grep('^07:', data_1$Hours), ] %>% select(score, Hours) # 07시 리플 행 추출
nrow(data_1_06)
nrow(data_1_07)
mean(data_1_06)
mean(data_1_06$score)
mean(data_1_07$score)
nrow(data_1_06) ; mean(data_1_06$score) # 06시 표본 갯수, 평균
nrow(data_1_07) ; mean(data_1_07$score) # 07시 표본 갯수, 평균
data_1_0607 <- rbind(data_1_06, data_1_07)
data_1_0607
data_1_06
data_1_06 <- data_1_06[data_1_06$Hours = '06시']
data_1_06 <- data_1_06[data_1_06$Hours <- '06시']
data_1_06 <- data_1_06[data_1_06$Hours] <- '06시'
data_1_06
data_1_06 <- data_1[grep('^06:', data_1$Hours), ] %>% select(score, Hours)  # 06시 리플 행 추출
data_1_06
data_1_06 <- data_1_06[data_1_06$Hours] = '06시'
data_1_06 <- data_1_06[data_1_06$Hours, Hours] = '06시'
data_1_06 <- data_1_06[data_1_06$Hours, ] = '06시'
data_1_06 <- data_1_06[data_1_06$Hours, ] == '06시'
data_1_06
data_1_06 <- data_1[grep('^06:', data_1$Hours), ] %>% select(score, Hours)  # 06시 리플 행 추출
data_1_06
data_1_06 <- data_1_06[data_1_06$Hours, ] <- '06시'
data_1_06
data_1_06 <- data_1[grep('^06:', data_1$Hours), ] %>% select(score, Hours)  # 06시 리플 행 추출
data_1_06
data_1_06[data_1_06$Hours == '06시']
data_1_06
data_1_06[data_1_06$Hours <- '06시']
data_1_06[data_1_06$Hours] <- '06시시'
data_1_06
data_1_06
data_1_06 <- data_1[grep('^06:', data_1$Hours), ] %>% select(score, Hours)  # 06시 리플 행 추출
data_1_06
data_1_06$Hours <- '06시'
data_1_06
data_1_06 <- data_1[grep('^06:', data_1$Hours), ] %>% select(score, Hours)  # 06시 리플 행 추출
data_1_06
data_1_06 <- data_1[grep('^06:', data_1$Hours), ] %>% select(score, Hours) %>% data_1_06$Hours <- '06시'# 06시 리플 행 추출
data_1_06$Hours <- '06시'
data_1_06
data_1_07$Hours <- '07시' # Hours칼럼 07시로 일괄 수정
data_1_07 <- data_1[grep('^07:', data_1$Hours), ] %>% select(score, Hours) # 07시 리플 행 추출
data_1_07$Hours <- '07시' # Hours칼럼 07시로 일괄 수정
data_1_07
nrow(data_1_06) ; mean(data_1_06$score) # 06시 표본 갯수, 평균
nrow(data_1_07) ; mean(data_1_07$score) # 07시 표본 갯수, 평균
data_1_0607 <- rbind(data_1_06, data_1_07)
data_1_0607
var.test(data_1_0607)
data_1_0607 <- as.list(rbind(data_1_06, data_1_07)) # 06시 표본, 07시 표본 병합
str(data_1_0607)
var.test(data_1_0607)
data_1_0607
data_1_0607 <- rbind(data_1_06, data_1_07) # 06시 표본, 07시 표본 병합
var.test(data_1_0607$score)
nrow(data_1_06) ; mean(data_1_06$score) # 06시 표본 갯수, 평균
nrow(data_1_07) ; mean(data_1_07$score) # 07시 표본 갯수, 평균
data_1_0607
var.test(data_1_0607$score)
var.test(data_1_0607$score, data_1_0607$Hours)
var.test(data_1_0607$score ~ data_1_0607$Hours)
t.test(data_1_0607$score ~ data_1_0607$Hours, mu = 0, var.equal = FALSE)
var.test(data_1_0607$score ~ data_1_0607$Hours) # 유의 수준 0.05보다 p-value의 값이 작기 때문에 귀무가설 기각, 즉 모분산 서로 다름
data_1_06 <- data_1[grep('^06:', data_1$Hours), ] %>% select(score, Hours) # 06시 리플 행 추출
data_1_06
data_1_06$Hours <- '06시' # Hours칼럼 06시로 일괄 수정
data_1_06
qqplot(data_1_06$score)
# 정규성 가정
qqnorm(data_1_06)
data_1_06
data_1
# 정규성 가정
data_1[data_1$Hours == '^06:'] <- 06시시
# 정규성 가정
data_1[data_1$Hours == '^06:'] <- '06시'
data_1
# 정규성 가정
data_1[data_1$Hours == '^20:'] <- '20시'
data_1
# 정규성 가정
data_1[data_1$Hours == '^20:']
# 정규성 가정
data_1[grep('^06:', data_1$Hours)] <- '06시'
# 정규성 가정
data_1[grep('^06:', data_1$Hours)]
# 정규성 가정
data_1[grep('^06:', data_1$Hours)]
# 정규성 가정
data_1[grep('^06:', data_1$Hours), ]
gsub('^06:', '06시', data_1)
data_1
gsub('^20:', '20시', data_1)
gsub
data_1
gsub('^20:', '20시', data_1$Hours)
# 정규성 가정
data_1[grep('^06:', data_1$Hours), ]
# 문자열 datetime -> date, time 으로 분리 및 요일 생성
data_1 <- data %>%
mutate(DateTime = ymd_hm(time)) %>%
mutate(Dates = format(as.POSIXct(strptime(DateTime,"%Y-%m-%d %H:%M:%S",tz="")) ,format = "%Y-%m-%d")) %>%
mutate(Hours = format(as.POSIXct(strptime(DateTime,"%Y-%m-%d %H:%M:%S",tz="")) ,format = "%H:%M:%S")) %>%
mutate(Days = weekdays(as.Date(DateTime))) %>%
select(score, Dates, Hours, Days)
# 정규성 가정
data_1[grep('^06:', data_1$Hours), ]
# 정규성 가정
data_1[grep('^06:', data_1$Hours), ]$Hours <- '6시시'
data_1
# 정규성 가정
data_1[grep('^20:', data_1$Hours), ]$Hours <- '20시'
head(data_1)
# 정규성 가정
i <- 0
for (i in 0:23) {
data_1[grep('^i:', data_1$Hours), ]$Hours <- 'i시'
}
for (i in 0:23) {
data_1[grep(paste0('^'i':'), data_1$Hours), ]$Hours <- paste0(i'시')
}
for (i in 0:23) {
data_1[grep(paste0('^', i, ':'), data_1$Hours), ]$Hours <- paste0(i, '시')
}
# 정규성 가정
i <- 0
for (i in 0:23) {
data_1[grep(paste0('^', i, ':'), data_1$Hours), ]$Hours <- paste0(i, '시')
}
paste0('^', i, ':')
for (i in 00:23) {
data_1[grep(paste0('^', 0, i, ':'), data_1$Hours), ]$Hours <- paste0(0, i, '시')
}
# 정규성 가정
i <- 0
for (i in 00:23) {
data_1[grep(paste0('^', '0', i, ':'), data_1$Hours), ]$Hours <- paste0('0', i, '시')
}
# 정규성 가정
i <- 0
for (i in 0:23) {
data_1[grep(paste0('^', '0', i, ':'), data_1$Hours), ]$Hours <- paste0('0', i, '시')
}
paste0('^', '0', i, ':')
paste0('0', i, '시')
# 문자열 datetime -> date, time 으로 분리 및 요일 생성
data_1 <- data %>%
mutate(DateTime = ymd_hm(time)) %>%
mutate(Dates = format(as.POSIXct(strptime(DateTime,"%Y-%m-%d %H:%M:%S",tz="")) ,format = "%Y-%m-%d")) %>%
mutate(Hours = format(as.POSIXct(strptime(DateTime,"%Y-%m-%d %H:%M:%S",tz="")) ,format = "%H:%M:%S")) %>%
mutate(Days = weekdays(as.Date(DateTime))) %>%
select(score, Dates, Hours, Days)
str(data_1) ; head(data_1)
for (i in 0:23) {
data_1[grep(paste0('^', '0', i, ':'), data_1$Hours), ]$Hours <- paste0('0', i, '시')
}
data_1
k <- 0
for (k in 10:24) {
data_1[grep(paste0('^', i, ':'), data_1$Hours), ]$Hours <- paste0('0', '시')
}
k <- 10
for (k in 10:24) {
data_1[grep(paste0('^', i, ':'), data_1$Hours), ]$Hours <- paste0('0', '시')
}
for (k in 10:24) {
data_1[grep(paste0('^', k, ':'), data_1$Hours), ]$Hours <- paste0(k, '시')
}
paste0('^', k, ':')
paste0(k, '시')
# 문자열 datetime -> date, time 으로 분리 및 요일 생성
data_1 <- data %>%
mutate(DateTime = ymd_hm(time)) %>%
mutate(Dates = format(as.POSIXct(strptime(DateTime,"%Y-%m-%d %H:%M:%S",tz="")) ,format = "%Y-%m-%d")) %>%
mutate(Hours = format(as.POSIXct(strptime(DateTime,"%Y-%m-%d %H:%M:%S",tz="")) ,format = "%H:%M:%S")) %>%
mutate(Days = weekdays(as.Date(DateTime))) %>%
select(score, Dates, Hours, Days)
# 정규성 가정
i <- 0
for (i in 0:9) {
data_1[grep(paste0('^', '0', i, ':'), data_1$Hours), ]$Hours <- paste0('0', i, '시')
}
k <- 10
for (k in 10:24) {
data_1[grep(paste0('^', k, ':'), data_1$Hours), ]$Hours <- paste0(k, '시')
}
k <- 10
for (k in 10:23) {
data_1[grep(paste0('^', k, ':'), data_1$Hours), ]$Hours <- paste0(k, '시')
}
# 문자열 datetime -> date, time 으로 분리 및 요일 생성
data_1 <- data %>%
mutate(DateTime = ymd_hm(time)) %>%
mutate(Dates = format(as.POSIXct(strptime(DateTime,"%Y-%m-%d %H:%M:%S",tz="")) ,format = "%Y-%m-%d")) %>%
mutate(Hours = format(as.POSIXct(strptime(DateTime,"%Y-%m-%d %H:%M:%S",tz="")) ,format = "%H:%M:%S")) %>%
mutate(Days = weekdays(as.Date(DateTime))) %>%
select(score, Dates, Hours, Days)
# 정규성 가정
i <- 0
for (i in 0:9) {
data_1[grep(paste0('^', '0', i, ':'), data_1$Hours), ]$Hours <- paste0('0', i, '시')
}
k <- 10
for (k in 10:23) {
data_1[grep(paste0('^', k, ':'), data_1$Hours), ]$Hours <- paste0(k, '시')
}
data_1
# 정규성 가정
shapiro.test(data_1[data_1$Hours == '00시']$score)
data_1[data_1$Hours == '00시']
data_1[data_1$Hours == '00시', ]
# 정규성 가정
shapiro.test(data_1[data_1$Hours == '00시', ]$score)
# 문자열 datetime -> date, time 으로 분리 및 요일 생성
data_1 <- data %>%
mutate(DateTime = ymd_hm(time)) %>%
mutate(Dates = format(as.POSIXct(strptime(DateTime,"%Y-%m-%d %H:%M:%S",tz="")) ,format = "%Y-%m-%d")) %>%
mutate(Hours = format(as.POSIXct(strptime(DateTime,"%Y-%m-%d %H:%M:%S",tz="")) ,format = "%H:%M:%S")) %>%
mutate(Days = weekdays(as.Date(DateTime))) %>%
select(score, Dates, Hours, Days)
i <- 0
for (i in 0:9) {
data_1[grep(paste0('^', '0', i, ':'), data_1$Hours), ]$Hours <- paste0(i, '시')
}
k <- 10
for (k in 10:23) {
data_1[grep(paste0('^', k, ':'), data_1$Hours), ]$Hours <- paste0(k, '시')
}
paste0(i, '시')
# 정규성 가정
i <- 0
shapiro.test(data_1[data_1$Hours == paste0(i, '시'), ]$score)
for (i in 0:23) {
shapiro.test(data_1[data_1$Hours == paste0(i, '시'), ]$score)
}
i
# 정규성 가정
i <- 0
for (i in 0:23) {
shapiro.test(data_1[data_1$Hours == paste0(i, '시'), ]$score)
}
i
# 정규성 가정
i <- 0
for (i in 0:23) {
shapiro.test(data_1[data_1$Hours == paste0(i, '시'), ]$score)
}
shapiro.test(data_1[data_1$Hours == paste0(i, '시'), ]$score)
i
data_1
# 정규성 가정
shapiro.test(data_1[data_1$Hours == '0시'), ]$score)
# 정규성 가정
shapiro.test(data_1[data_1$Hours == '0시'), ]$score)
data_1[data_1$Hours == '0시'), ]
data_1
# 정규성 가정
shapiro.test(data_1[data_1$Hours == '1시'), ]$score)
data_1[data_1$Hours == '1시'), ]$score
data_1[data_1$Hours == '1시'), ]
head(data1)
head(data_1)
shapiro.test(data_1[data_1$Hours == '1시'), ]$score)
shapiro.test(data_1[data_1$Hours == '1시'), ]$score)
data_1[data_1$Hours == '20시', ]
shapiro.test(data_1[data_1$Hours == '1시', ]$score)
# 정규성 가정
shapiro.test(data_1[data_1$Hours == '0시', ]$score)
# 정규성 가정
shapiro.test(data_1[data_1$Hours == '0시', ]$score)
shapiro.test(data_1[data_1$Hours == '1시', ]$score)
shapiro.test(data_1[data_1$Hours == '2시', ]$score)
shapiro.test(data_1[data_1$Hours == '3시', ]$score)
shapiro.test(data_1[data_1$Hours == '4시', ]$score)
shapiro.test(data_1[data_1$Hours == '5시', ]$score)
shapiro.test(data_1[data_1$Hours == '6시', ]$score)
shapiro.test(data_1[data_1$Hours == '7시', ]$score)
shapiro.test(data_1[data_1$Hours == '8시', ]$score)
# 정규성 가정
shapiro.test(data_1[data_1$Hours == '0시', ]$score)
# 등분산성 검토
var.test(data_1$score ~ data_1$Hours)
# 등분산성 검정
install.packages("lawstat")
library(lawstat)
levene.test(score, Hours)
levene.test(data_1$score, data_1$Hours)
bartlett.test(score ~ Hours, data_1)
levene.test(score ~ Hours, data_1)
levene.test(data_1$score ~ data_1$Hours)
bartlett.test(score ~ Hours, data_1)
levene.test(data_1$score, data_1$Hours)
?levene.test
levene.test(data_1$score, data_1$Hours) # Levene 검정은 표본이 정규성을 만족하든 만족하지 않든 상관없이 사용 가능
# 가설 검정
ow <- lm(score ~ Hours, data_1)
anova(ow)
# 시간대별 평점 추이
ggplot(data_Hours, aes(Hours, score_mean, group = 1)) +
geom_line(color = 'red', size = 1) +
ggtitle("GreenBook 시간별대 평점 추이") +
labs(x = "시간", y = "평점") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15, color = "darkblue")) +
theme(axis.title = element_text(face = "bold", size = 10)) +
theme(axis.text.x = element_text(angle=0, hjust=1, size = 8))
# (기타)월별 평점 추이
ggplot(data_Months, aes(Months, score_mean, group = 1)) +
geom_line(color = 'red', size = 1) +
ggtitle("GreenBook 월별 평점 추이") +
labs(x = "월", y = "평점") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15, color = "darkblue")) +
theme(axis.title = element_text(face = "bold", size = 10)) +
theme(axis.text = element_text(size = 10))
# 평점이 가장 높은 달은 7월(9.714)이고, 가장 낮은 달은 6월(9.484)이다.
# 하지만 그 차이는 0.23으로 미미하여, 월별 평점의 변화가 있다고 볼 수 없다.
summary(data_Months)
data_Months
data_1
data_Months
# (기타)월별 평균
data_Months <- data_1 %>%
mutate(Months = format(as.POSIXct(strptime(Dates,"%Y-%m-%d",tz="")) ,format = "%m")) %>%
group_by(Months) %>%
summarise(score_mean = mean(score))
str(data_Months); head(data_Months)
View(data_Months)
# (기타)월별 평균
data_Months <- data_1 %>%
mutate(Months = format(as.POSIXct(strptime(Dates,"%Y-%m-%d",tz="")) ,format = "%m")) %>%
group_by(Months) # %>%
#summarise(score_mean = mean(score))
str(data_Months); head(data_Months)
# (기타)월별 평균
data_Months <- data_1 %>%
mutate(Months = format(as.POSIXct(strptime(Dates,"%Y-%m-%d",tz="")) ,format = "%m")) %>%
group_by(Months) %>%
summarise(score_mean = mean(score))
str(data_Months); head(data_Months)
data_1
data_1_Months %>%
mutate(Months = format(as.POSIXct(strptime(Dates,"%Y-%m-%d",tz="")) ,format = "%m"))
data_1_Months <- data_1 %>%
mutate(Months = format(as.POSIXct(strptime(Dates,"%Y-%m-%d",tz="")) ,format = "%m"))
data_1_Months
data_1_Months <- data_1 %>%
mutate(Months = format(as.POSIXct(strptime(Dates,"%Y-%m-%d",tz="")) ,format = "%m")) %>%
select(score, Months)
tail(data_1_Months)
# 1) 정규성 검정
shapiro.test(data_1_Months[data_1_Months$Months == 01, ]$score) # p-value(2.2e-16) < 유의수준(0.05) 이므로 귀무가설 기각 / 그러나 정규성 만족한다고 가정
# 1) 정규성 검정
shapiro.test(data_1_Months[data_1_Months$Months == '01', ]$score) # p-value(2.2e-16) < 유의수준(0.05) 이므로 귀무가설 기각 / 그러나 정규성 만족한다고 가정
# 1) 정규성 검정
shapiro.test(data_1_Months[data_1_Months$Months == '02', ]$score) # p-value(2.2e-16) < 유의수준(0.05) 이므로 귀무가설 기각 / 그러나 정규성 만족한다고 가정
# 1) 정규성 검정
shapiro.test(data_1_Months[data_1_Months$Months == '03', ]$score) # p-value(2.2e-16) < 유의수준(0.05) 이므로 귀무가설 기각 / 그러나 정규성 만족한다고 가정
# 1) 정규성 검정
shapiro.test(data_1_Months[data_1_Months$Months == '04', ]$score) # p-value(2.2e-16) < 유의수준(0.05) 이므로 귀무가설 기각 / 그러나 정규성 만족한다고 가정
# 1) 정규성 검정
shapiro.test(data_1_Months[data_1_Months$Months == '05', ]$score) # p-value(2.2e-16) < 유의수준(0.05) 이므로 귀무가설 기각 / 그러나 정규성 만족한다고 가정
# 1) 정규성 검정
shapiro.test(data_1_Months[data_1_Months$Months == '06', ]$score) # p-value(2.2e-16) < 유의수준(0.05) 이므로 귀무가설 기각 / 그러나 정규성 만족한다고 가정
# 1) 정규성 검정
shapiro.test(data_1_Months[data_1_Months$Months == '07', ]$score) # p-value(2.2e-16) < 유의수준(0.05) 이므로 귀무가설 기각 / 그러나 정규성 만족한다고 가정
# 1) 정규성 검정
shapiro.test(data_1_Months[data_1_Months$Months == '01', ]$score) # p-value(2.2e-16) < 유의수준(0.05) 이므로 귀무가설 기각 / 그러나 정규성 만족한다고 가정
# 2) 등분산성 검정
levene.test(data_1_Months$score, data_1_Months$Months) # Levene 검정은 표본이 정규성을 만족하든 만족하지 않든 상관없이 사용 가능
# 3) 가설 검정
ow <- lm(score ~ Months, data_1_Months)
anova(ow)
data_1
# 1) 정규성 검정
shapiro.test(data_1[data_1$Days == '월요일', ]$score) # p-value(2.2e-16) < 유의수준(0.05) 이므로 귀무가설 기각 / 그러나 정규성 만족한다고 가정
# 2) 등분산성 검정
levene.test(data_1$score, data_1$Days) # p-value(0.5616) > 유의수준(0.05) 이므로 귀무가설 채택, 즉 등분산성 만족함
# 3) 가설 검정
ow <- lm(score ~ days, data_1)
anova(ow)
library(KoNLP)
library(dplyr)
library(lubridate)
library(ggplot2)
library(rJava)
library(wordcloud2)
library(dplyr)
library(rvest)
library(dplyr)
library(stringr)
library(xlsx)
library(lawstat)
# 날짜별 평점 추이
ggplot(data_Dates, aes(Dates, score_mean, group = 1)) +
geom_line(color = 'red', size = 0.5) +
ggtitle("GreenBook 날짜별 평점 추이") +
labs(x = "날짜", y = "평점") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15, color = "darkblue")) +
theme(axis.title = element_text(face = "bold", size = 10)) +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 5))
# 시간대별 평점 추이
ggplot(data_Hours, aes(Hours, score_mean, group = 1)) +
geom_line(color = 'red', size = 1) +
ggtitle("GreenBook 시간별대 평점 추이") +
labs(x = "시간", y = "평점") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15, color = "darkblue")) +
theme(axis.title = element_text(face = "bold", size = 10)) +
theme(axis.text.x = element_text(angle=0, hjust=1, size = 8))
# (기타)월별 평점 추이
ggplot(data_Months, aes(Months, score_mean, group = 1)) +
geom_line(color = 'red', size = 1) +
ggtitle("GreenBook 월별 평점 추이") +
labs(x = "월", y = "평점") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15, color = "darkblue")) +
theme(axis.title = element_text(face = "bold", size = 10)) +
theme(axis.text = element_text(size = 10))
data_Days
knitr::opts_chunk$set(echo = TRUE)
ggplot(data_Days, aes(Days, score_mean, group = 1)) +
geom_line(color = 'red', size = 1) +
ggtitle("GreenBook 요일별 평점 추이") +
labs(x = "요일", y = "평점") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15, color = "darkblue")) +
theme(axis.title = element_text(face = "bold", size = 10)) +
theme(axis.text = element_text(size = 10)) +
scale_x_discrete(limits=c("월요일", "화요일", "수요일", "목요일", "금요일", "토요일", "일요일"))
# 1) 정규성 검정
shapiro.test(data_1[data_1$Days == '월요일', ]$score) # p-value(2.2e-16) < 유의수준(0.05) 이므로 귀무가설 기각 / 그러나 정규성 만족한다고 가정
# 2) 등분산성 검정
levene.test(data_1$score, data_1$Days) # p-value(0.1761) > 유의수준(0.05) 이므로 귀무가설 채택, 즉 등분산성 만족함
# 3) 가설 검정
ow <- lm(score ~ days, data_1)
# 3) 가설 검정
ow <- lm(score ~ Days, data_1)
anova(ow)
data_1
anova(ow)
ggplot(data_Days, aes(Days, score_mean, group = 1)) +
geom_line(color = 'red', size = 1) +
ggtitle("GreenBook 요일별 평점 추이") +
labs(x = "요일", y = "평점") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15, color = "darkblue")) +
theme(axis.title = element_text(face = "bold", size = 10)) +
theme(axis.text = element_text(size = 10)) +
scale_x_discrete(limits=c("월요일", "화요일", "수요일", "목요일", "금요일", "토요일", "일요일"))
# 1) 정규성 검정
shapiro.test(data_1[data_1$Days == '월요일', ]$score) # p-value(2.2e-16) < 유의수준(0.05) 이므로 귀무가설 기각 / 그러나 정규성 만족한다고 가정
# 2) 등분산성 검정
levene.test(data_1$score, data_1$Days) # p-value(0.1761) > 유의수준(0.05) 이므로 귀무가설 채택, 즉 등분산성 만족함
# 3) 가설 검정
ow <- lm(score ~ Days, data_1)
anova(ow)
